/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Mar 10, 2012, 5:56:22 PM
 */
package subtitles;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author tharindu_DG
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        fileChooser = new JFileChooser();    // initialising the file chooser
        selectedFile = openFileChooser();    // getting a reference to the selected file
        if (selectedFile != null) {
            setUI(selectedFile);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseBtn = new javax.swing.JButton();
        imdbBtn = new javax.swing.JButton();
        getSubBtn = new javax.swing.JButton();
        getLyricsBtn = new javax.swing.JButton();
        abtBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("4See VLC Extension");
        setResizable(false);

        browseBtn.setFont(new java.awt.Font("Verdana", 1, 12));
        browseBtn.setText("Browse For a Media File");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        imdbBtn.setFont(new java.awt.Font("Verdana", 1, 12));
        imdbBtn.setText("Checkout IMDB");
        imdbBtn.setEnabled(false);
        imdbBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imdbBtnActionPerformed(evt);
            }
        });

        getSubBtn.setFont(new java.awt.Font("Verdana", 1, 12));
        getSubBtn.setText("Get Subtitles");
        getSubBtn.setEnabled(false);
        getSubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSubBtnActionPerformed(evt);
            }
        });

        getLyricsBtn.setFont(new java.awt.Font("Verdana", 1, 12));
        getLyricsBtn.setText("Get Lyrics");
        getLyricsBtn.setEnabled(false);
        getLyricsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLyricsBtnActionPerformed(evt);
            }
        });

        abtBtn.setFont(new java.awt.Font("Verdana", 1, 12));
        abtBtn.setText("About 4See");
        abtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abtBtnActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subtitles/4See-small.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(browseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(abtBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(getSubBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imdbBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getLyricsBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(abtBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(getSubBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getLyricsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(imdbBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // function is called when manual selection of the file is prefered
    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed

        selectedFile = openFileChooser();
        if (selectedFile != null) {
            setUI(selectedFile);
        }
    }//GEN-LAST:event_browseBtnActionPerformed

    // function is called when about button is clicked
    private void abtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abtBtnActionPerformed

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AboutFrame().setVisible(true);
            }
        });
    }//GEN-LAST:event_abtBtnActionPerformed

    // function is called when download subtitle button is clicked
    private void getSubBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSubBtnActionPerformed
        subtitleFrame.setVisible(true);
    }//GEN-LAST:event_getSubBtnActionPerformed

    // function is called when browse IMDB button is clicked
    private void imdbBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imdbBtnActionPerformed
        imdbFrame.setVisible(true);
    }//GEN-LAST:event_imdbBtnActionPerformed

    //  function is called when get lyrics button is clicked
    private void getLyricsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLyricsBtnActionPerformed
        LyricsFrame lyricsFrame = new LyricsFrame(metadataHandler.getArtist(), metadataHandler.getSongTitle());
        lyricsFrame.setVisible(true);
    }//GEN-LAST:event_getLyricsBtnActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abtBtn;
    private javax.swing.JButton browseBtn;
    private javax.swing.JButton getLyricsBtn;
    private javax.swing.JButton getSubBtn;
    private javax.swing.JButton imdbBtn;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private JFileChooser fileChooser;
    private File selectedFile;
    private String movieHash;
    private SubtitleGui subtitleFrame;
    private ImdbFrame imdbFrame;
    private MetadataHandler metadataHandler;

    // function is called when the user wants to manually browse for a file
    private File openFileChooser() {

        // initialising file filter
        FileFilter fileFilter = new FileFilter() {

            public boolean accept(File pathname) {
                if (pathname.isDirectory()) {
                    return true;
                }
                String path = pathname.getAbsolutePath().toLowerCase();
                // defining the accepted file types
                if (path.endsWith(".mp3") || path.endsWith(".mp4") || path.endsWith(".avi") || path.endsWith(".mkv") || path.endsWith(".wmv") || path.endsWith(".vob") || path.endsWith(".wav")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "Media Files";
            }
        };

        fileChooser.setFileFilter(fileFilter);
        int retVal = fileChooser.showOpenDialog(null);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            final File selected = fileChooser.getSelectedFile();
            if (selected.getAbsolutePath().toLowerCase().endsWith(".mp3")) {
                metadataHandler = new MetadataHandler(selected);  // initialising metadata for mp3 files
            } else {
                try {
                    movieHash = OpenSubtitlesHasher.computeHash(selected);
                    movieHash = movieHash + "_MOVIE_HASH";

                    java.awt.EventQueue.invokeLater(new Runnable() {

                        public void run() {

                            subtitleFrame = new SubtitleGui(movieHash, selected);
                            java.awt.EventQueue.invokeLater(new Runnable() {

                                public void run() {
                                    imdbFrame = new ImdbFrame(subtitleFrame.getMovieName());
                                }
                            });
                        }
                    });
                } catch (IOException ex) {
                }
            }
            return selected;
        }
        return null;
    }

    // setting the interface according to the file type
    private void setUI(File selectedFile) {
        if (selectedFile == null) {
            return;
        }
        String path = selectedFile.getAbsolutePath().toLowerCase();
        int sizeMB = (int) (selectedFile.length() / (1024 * 1024));
        // setting the UI for audio files
        if (path.endsWith(".mp3") || (path.endsWith(".mp4") && sizeMB < 125) || (path.endsWith(".wmv") && sizeMB < 125)) {
            getLyricsBtn.setEnabled(true);
            imdbBtn.setEnabled(false);
            getSubBtn.setEnabled(false);
            this.setVisible(true);
            return;
            // setting the UI for vedio files
        } else if ((sizeMB > 126) && (path.endsWith(".avi") || path.endsWith(".mkv") || path.endsWith("mp4") || path.endsWith(".vob"))) {
            getLyricsBtn.setEnabled(false);
            imdbBtn.setEnabled(true);
            getSubBtn.setEnabled(true);
            this.setVisible(true);
            return;
        }
    }

    public File getSelectedFile() {
        return selectedFile;
    }
}
